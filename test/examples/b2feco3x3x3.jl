using TOML

@testset "b2feco3x3x3" begin
	input = """
	[general]
	name = "b2feco"
	nat = 54
	kd = [ "Fe", "Co" ]
	periodicity = [ true, true, true ]
	# periodicity = [false, false, false]
	j_zero_thr = 1e-10

	[symmetry]
	tolerance = 1e-8

	[interaction]
		nbody = 2
		[interaction.lmax]
		Fe = [ 0, 1 ] # the number of elements shoud be the same with "nbody" value.
		Co = [ 0, 1 ]
		[interaction.cutoff] # unit is bohr
		Fe-Fe = [ 0, 0 ] # first element is just dummy to align wigh lmax array
		Fe-Co = [ 0, 3 ]
		Co-Co = [ 0, 0 ]
		# negative cutoff means all of the possible interaction will be considered.

	[regression]
	weight = 0.5        # 1.0: only use the energy info. 0.0: only use torque info (0 <= weight_ratio <= 1)
	datafile = "EMBSET.txt"

	[structure]
	scale = 2.84
	lattice = [
		[ 3.0, 0.0, 0.0 ],
		[ 0.0, 3.0, 0.0 ],
		[ 0.0, 0.0, 3.0 ],
	]
	kd_list = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2]
	position = [
	[0.000000000 ,       0.000000000 ,       0.000000000],
 [   0.000000000 ,       0.000000000 ,       0.333333333],
 [   0.000000000 ,       0.000000000 ,       0.666666667],
 [   0.000000000 ,       0.333333333 ,       0.000000000],
 [   0.000000000 ,       0.333333333 ,       0.333333333],
 [   0.000000000 ,       0.333333333 ,       0.666666667],
 [   0.000000000 ,       0.666666667 ,       0.000000000],
 [   0.000000000 ,       0.666666667 ,       0.333333333],
 [   0.000000000 ,       0.666666667 ,       0.666666667],
 [   0.333333333 ,       0.000000000 ,       0.000000000],
 [   0.333333333 ,       0.000000000 ,       0.333333333],
 [   0.333333333 ,       0.000000000 ,       0.666666667],
 [   0.333333333 ,       0.333333333 ,       0.000000000],
 [   0.333333333 ,       0.333333333 ,       0.333333333],
 [   0.333333333 ,       0.333333333 ,       0.666666667],
 [   0.333333333 ,       0.666666667 ,       0.000000000],
 [   0.333333333 ,       0.666666667 ,       0.333333333],
 [   0.333333333 ,       0.666666667 ,       0.666666667],
 [   0.666666667 ,       0.000000000 ,       0.000000000],
 [   0.666666667 ,       0.000000000 ,       0.333333333],
 [   0.666666667 ,       0.000000000 ,       0.666666667],
 [   0.666666667 ,       0.333333333 ,       0.000000000],
 [   0.666666667 ,       0.333333333 ,       0.333333333],
 [   0.666666667 ,       0.333333333 ,       0.666666667],
 [   0.666666667 ,       0.666666667 ,       0.000000000],
 [   0.666666667 ,       0.666666667 ,       0.333333333],
 [   0.666666667 ,       0.666666667 ,       0.666666667],
 [   0.166666667 ,       0.166666667 ,       0.166666667],
 [   0.166666667 ,       0.166666667 ,       0.500000000],
 [   0.166666667 ,       0.166666667 ,       0.833333333],
 [   0.166666667 ,       0.500000000 ,       0.166666667],
 [   0.166666667 ,       0.500000000 ,       0.500000000],
 [   0.166666667 ,       0.500000000 ,       0.833333333],
 [   0.166666667 ,       0.833333333 ,       0.166666667],
 [   0.166666667 ,       0.833333333 ,       0.500000000],
 [   0.166666667 ,       0.833333333 ,       0.833333333],
 [   0.500000000 ,       0.166666667 ,       0.166666667],
 [   0.500000000 ,       0.166666667 ,       0.500000000],
 [   0.500000000 ,       0.166666667 ,       0.833333333],
 [   0.500000000 ,       0.500000000 ,       0.166666667],
 [   0.500000000 ,       0.500000000 ,       0.500000000],
 [   0.500000000 ,       0.500000000 ,       0.833333333],
 [   0.500000000 ,       0.833333333 ,       0.166666667],
 [   0.500000000 ,       0.833333333 ,       0.500000000],
 [   0.500000000 ,       0.833333333 ,       0.833333333],
 [   0.833333333 ,       0.166666667 ,       0.166666667],
 [   0.833333333 ,       0.166666667 ,       0.500000000],
 [   0.833333333 ,       0.166666667 ,       0.833333333],
 [   0.833333333 ,       0.500000000 ,       0.166666667],
 [   0.833333333 ,       0.500000000 ,       0.500000000],
 [   0.833333333 ,       0.500000000 ,       0.833333333],
 [   0.833333333 ,       0.833333333 ,       0.166666667],
 [   0.833333333 ,       0.833333333 ,       0.500000000],
 [   0.833333333 ,       0.833333333 ,       0.833333333],
	]
	"""
	parsed = TOML.parse(input)
	sclus = SpinCluster(parsed)
	# for i in 1:sclus.symmetry.nsym
	# 	if sclus.symmetry.symdata[i].is_translation_included
	# 		continue
	# 	end
	# 	println(i)
	# 	println(sclus.symmetry.symdata[i])
	# end

	# idx = 48
	# Magesty.BasisSets.__write_martix(sclus.basisset.each_projection_dict[1][idx])
	# for idx in 1:sclus.symmetry.nsym
	# 	display(sclus.basisset.each_projection_dict[1][idx])
	# end
	# for (i, basis) in enumerate(sclus.basisset.basislist)
	# 	println(i, "\t", basis)
	# println(sclus.basisset.basislist)
	# @test length(sclus.basisset.basislist) ==
	# 	  8 * (3 * 3) + (8 - 1) * (3 * 3) + 2 * (3 * (3 * 3)) + 2 * (4 * (3 * 3)) + 2 # 72 + 63 + 54 +72 + 2 
end
